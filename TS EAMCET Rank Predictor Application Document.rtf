{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 @Arial Unicode MS;}{\f1\fnil\fcharset0 Arial;}{\f2\fnil\fcharset0 Calibri;}{\f3\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\b\f0\fs36\lang9 TS EAMCET Rank Predictor Application\par

\pard\sa200\sl276\slmult1\fs28\tab\tab\tab\tab\par
\par
\par

\pard\sa200\sl360\slmult1\tab\tab\tab\tab\tab\f1 Abstract\fs32\par

\pard\sa200\sl360\slmult1\qj\b0\fs24                As the 2024 intermediate batch of students in Telangana has completed their TS EAMCET exam, many are plagued with uncertainties regarding their potential admission into B.Tech programs. To address this concern, I, K. Venkata Sai Praneeth, have developed a predictive model aimed at alleviating students' anxieties by estimating their chances of securing a seat in various colleges based on their TS EAMCET rank.The Rank Predictor application leverages historical data provided by the Telangana State Council of Higher Education (TSCHE). By analyzing previous years' allotment data, the model can predict whether a student with a given rank might secure a seat in a particular college and branch. This predictive capability helps students understand their standing and make informed decisions during the counseling process.The application employs a Random Forest classifier to make these predictions, processing the data and offering a user-friendly interface developed with Tkinter. While the predictions are based on the 2023 allotment data and should not be considered final, they provide a valuable reference point for students navigating the admission process. This tool aims to reduce the overthinking and stress associated with college admissions by offering data-driven insights.\par

\pard\sa200\sl360\slmult1\b\f0\fs28\par

\pard\sa200\sl276\slmult1\par
\par
\par
Project Overview\par
\b0\fs22 The Rank Predictor application is a Python-powered graphical user interface (GUI) that can let users predict institution code, institution name and department code given a specific rank. The application deploys machine learning algorithms, especially the Random Forest classifier, to predict the data from the given data input in an Excel file.\par
\b\fs28 Features\b0\fs22\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Load and preprocess the data from an Excel file.\par
{\pntext\f3\'B7\tab}Teach a Random Forest model on the given data.\par
{\pntext\f3\'B7\tab}Save and load the trained model and encoders.\par
{\pntext\f3\'B7\tab}Determine the institution and division concerned by rank information.\par
{\pntext\f3\'B7\tab}Simple and user-friendly GUI for displaying results using Tkinter.\b\fs36\par

\pard\sa200\sl276\slmult1\fs28 Usage\b0\fs22\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\f1 Select Input File: Browse and select the Excel file containing the institution data.\par
{\pntext\f3\'B7\tab}Enter Rank: Input the rank for which the prediction is to be made.\par
{\pntext\f3\'B7\tab}Predict: Click the "Predict" button to display the predicted institution code, institution name, and branch code.\b\fs36\par

\pard\sa200\sl276\slmult1\f2\fs28 Minimum Requirements\par

\pard 
{\pntext\f2 1.\tab}{\*\pn\pnlvlbody\pnf2\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1\b0\fs22 Python 3.6 or higher\par
{\pntext\f2 2.\tab}Libraries:\par
{\pntext\f2 3.\tab}tkinter\par
{\pntext\f2 4.\tab}pandas\par
{\pntext\f2 5.\tab}scikit-learn\par
{\pntext\f2 6.\tab}joblib\par
{\pntext\f2 7.\tab}openpyxl (for reading Excel files)\par

\pard\sa200\sl276\slmult1\b\fs28 Installation\b0\fs22\par
To install the required libraries, you can use the following pip command:\par
\b pip install pandas scikit-learn joblib openpyxl\par
\par
\fs28 Code Details\par
\fs22 Imports:\par

\pard\li720\sa200\sl276\slmult1 import tkinter as tk\par
from tkinter import filedialog, messagebox\par
import pandas as pd\par
from sklearn.model_selection import train_test_split\par
from sklearn.preprocessing import LabelEncoder\par
from sklearn.ensemble import RandomForestClassifier\par
import joblib\par

\pard\sa200\sl276\slmult1\b0 These libraries are used for GUI development, data processing, model training, and saving/loading the model.\par
\b\fs28 Data Loading and Processing\par

\pard\li720\sa200\sl276\slmult1\fs22 def load_and_process_data(file_path):\par
    df = pd.read_excel(file_path)\par
    if 'Branch_code' in df.columns:\par
        df.rename(columns=\{'Branch_code': 'Branch_\\ncode'\}, inplace=True)\par
    df = df[['Inst Code', 'Institution Name', 'Branch_\\ncode', 'Rank']]\par
    df.dropna(inplace=True)\par
    return df\par
\b0 This function reads data from an Excel file, renames columns if necessary, selects relevant columns, and drops rows with missing values.\par
\b\fs28 Model Training\par
\fs22 def train_model(df):\par
    le_inst_code = LabelEncoder()\par
    le_inst_name = LabelEncoder()\par
    le_branch_code = LabelEncoder()\par
    df['Inst Code'] = le_inst_code.fit_transform(df['Inst Code'])\par
    df['Institution Name'] = le_inst_name.fit_transform(df['Institution Name'])\par
    df['Branch_\\ncode'] = le_branch_code.fit_transform(df['Branch_\\ncode'])\par
    X = df[['Rank']]\par
    y = df[['Inst Code', 'Institution Name', 'Branch_\\ncode']]\par
    \par
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\par
    \par
    model = RandomForestClassifier(n_estimators=100, random_state=42)\par
    model.fit(X_train, y_train)\par
    \par
    joblib.dump(le_inst_code, 'le_inst_code.pkl')\par
    joblib.dump(le_inst_name, 'le_inst_name.pkl')\par
    joblib.dump(le_branch_code, 'le_branch_code.pkl')\par
    joblib.dump(model, 'rank_predictor_model.pkl')\par
    \par
    return model, le_inst_code, le_inst_name, le_branch_code\par
\b0 This function encodes categorical features, splits the data into training and testing sets, trains a Random Forest model, and saves the model and encoders.\par
\b\fs28 Prediction\par

\pard\li1440\sa200\sl276\slmult1\fs22 def predict_institution_branch(rank, model, le_inst_code, le_inst_name, le_branch_code):\par
    prediction = model.predict([[rank]])\par
    inst_code = le_inst_code.inverse_transform([prediction[0][0]])[0]\par
    inst_name = le_inst_name.inverse_transform([prediction[0][1]])[0]\par
    branch_code = le_branch_code.inverse_transform([prediction[0][2]])[0]\par

\pard\li720\sa200\sl276\slmult1     return inst_code, inst_name, branch_code\par
\b0 This function makes predictions using the trained model and decodes the predicted values to return human-readable institution and branch details.\par
\b\fs28 GUI Functions\par

\pard\li1440\sa200\sl276\slmult1\fs22 def browse_file():\par
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])\par
    entry_file_path.delete(0, tk.END)\par
    entry_file_path.insert(0, file_path)\par
def predict():\par
    input_file = entry_file_path.get()\par
    ranks = [int(rank_entry.get())]\par
    df = load_and_process_data(input_file)\par
    model, le_inst_code, le_inst_name, le_branch_code = train_model(df)\par
    inst_code, inst_name, branch_code = predict_institution_branch(ranks[0], model, le_inst_code, le_inst_name, le_branch_code)\par
 messagebox.showinfo("Prediction Result", f"Institution Code: \{inst_code\}\\nInstitution Name: \{inst_name\}\\nBranch Code: \{branch_code\}")\par
\par
\par

\pard\sa200\sl276\slmult1\fs28 GUI Setup\par

\pard\li720\sa200\sl276\slmult1\fs22 root = tk.Tk()\par
root.title("Rank Predictor")\par
label_file_path = tk.Label(root, text="Select Input File:")\par
label_file_path.grid(row=0, column=0, padx=5, pady=5, sticky="w")\par
entry_file_path = tk.Entry(root, width=50)\par
entry_file_path.grid(row=0, column=1, columnspan=2, padx=5, pady=5, sticky="we")\par
button_browse = tk.Button(root, text="Browse", command=browse_file)\par
button_browse.grid(row=0, column=3, padx=5, pady=5)\par
label_rank = tk.Label(root, text="Enter Rank:")\par
label_rank.grid(row=1, column=0, padx=5, pady=5, sticky="w")\par
rank_entry = tk.Entry(root)\par
rank_entry.grid(row=1, column=1, columnspan=2, padx=5, pady=5, sticky="we")\par
button_predict = tk.Button(root, text="Predict", command=predict)\par
button_predict.grid(row=2, column=1, columnspan=2, padx=5, pady=5, sticky="we")\par
root.mainloop()\par

\pard\fi2160\sa200\sl276\slmult1\par
\par

\pard\sa200\sl276\slmult1\b0 This part of the code sets up the Tkinter GUI with labels, entry fields, and buttons for file selection and prediction.By following the instructions and using the provided functions, you can effectively run the Rank Predictor application to make institution and branch predictions based on a given rank.\b\par
}
 